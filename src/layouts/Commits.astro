---
import { Badge } from "@components/badge/badge";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@components/card/card";
import fetchGithubCommits from "@api/github/fetchGithubCommits"
import { DateTime } from "luxon";

const CHARACTER_REGEX = /[^a-zA-Z0-9\s]/g

const { repos, commits } = await fetchGithubCommits();

const toDateTime = (date: string) => {
  return DateTime.fromISO(date).toLocaleString(DateTime.DATE_MED);
}

const toRepoTitle = (header: string) => {

  let [scope, title] = header.split("-");
  title = title.replace(CHARACTER_REGEX, ' ');

  return { scope, title }
}

const toConventionalCommit = (message: string) => {
  let [type, msg] = message.split(":");

  return { type, msg }
}

---

{
  !commits.length ?
    (
      <span class="text-woodsmoke-200 text-base font-medium">No commits for yet... ðŸ˜“</span>
    ) 
  : 
    (
      commits.map(({ repo: { name }, commit, created_at }) => (
      <Card>
        <CardHeader>
          <CardTitle className="flex justify-between">
            <div class="h-max w-auto">
              <h3 class="text-woodsmoke-50 text-base inline-block">
                { toRepoTitle(repos[name]?.name).title }
              </h3>
              <span class="text-woodsmoke-400  mx-1">&bullet;</span>
              <span class="text-woodsmoke-400 text-base">
                { toRepoTitle(repos[name]?.name).scope }
              </span>
            </div>
            <span class="text-woodsmoke-200 text-sm">{ toDateTime(created_at) }</span>
          </CardTitle>
        </CardHeader>
        <CardContent className="text-woodsmoke-200 text-sm">
          { toConventionalCommit(commit.message).msg }
        </CardContent>
        <CardFooter className="space-y-0 space-x-2.5">
          {
            <Badge variant="secondary">
              { toConventionalCommit(commit.message).type }
            </Badge>
          }
          { 
            repos[name]?.topics.map((topic) => (
              <Badge>{ topic }</Badge>
            ))
          }
        </CardFooter>
      </Card>
    ))
  )
}
